/**
 * NursingIQ Chatbot - Intelligent Nursing Assistant
 * Handles chat functionality, message persistence, and AI responses
 * 
 * @author NursingIQ Team
 * @version 1.0.0
 */

class NursingChatbot {
    constructor() {
        this.messages = [];
        this.isTyping = false;
        this.storageKey = 'nursingiq-chat-history';
        this.init();
    }

    /**
     * Initialize the chatbot
     */
    init() {
        this.loadChatHistory();
        this.renderMessages();
        this.addWelcomeMessage();
        this.setupEventListeners();
    }

    /**
     * Setup event listeners
     */
    setupEventListeners() {
        // Message input handling
        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        // Send button
        const sendButton = document.querySelector('.chat-input-container .btn');
        if (sendButton) {
            sendButton.addEventListener('click', () => this.sendMessage());
        }
    }

    /**
     * Add welcome message
     */
    addWelcomeMessage() {
        if (this.messages.length === 0) {
            const welcomeMessage = {
                id: Date.now(),
                type: 'bot',
                content: 'ูุฑุญุจุงู! ุฃูุง ูุณุงุนุฏ ุงูุชูุฑูุถ ุงูุฐูู ๐ค\n\nูููููู ูุณุงุนุฏุชู ูู:\nโข ูุตุงุฆุญ ุงููุฐุงูุฑุฉ ูุงูุฏุฑุงุณุฉ\nโข ูุนูููุงุช ุนู ุงูููุงุฏ ุงูุฏุฑุงุณูุฉ\nโข ูุตุงุฆุญ ุงูุชุฏุฑูุจ ุงูุนููู\nโข ุงูุชุญุถูุฑ ููุงูุชุญุงูุงุช\nโข ููุงุฑุงุช ุงูุชูุฑูุถ ุงูุฃุณุงุณูุฉ\n\nููู ูููููู ูุณุงุนุฏุชู ุงููููุ',
                timestamp: new Date()
            };
            this.messages.push(welcomeMessage);
            this.renderMessages();
        }
    }

    /**
     * Send a message
     */
    sendMessage() {
        const messageInput = document.getElementById('messageInput');
        const message = messageInput.value.trim();

        if (!message || this.isTyping) return;

        // Add user message
        this.addMessage(message, 'user');
        messageInput.value = '';

        // Show typing indicator
        this.showTypingIndicator();

        // Simulate bot response
        setTimeout(() => {
            this.hideTypingIndicator();
            const botResponse = this.generateBotResponse(message);
            this.addMessage(botResponse, 'bot');
        }, 1000 + Math.random() * 2000); // Random delay between 1-3 seconds
    }

    /**
     * Add a message to the chat
     * @param {string} content - Message content
     * @param {string} type - Message type ('user' or 'bot')
     */
    addMessage(content, type) {
        const message = {
            id: Date.now() + Math.random(),
            type: type,
            content: content,
            timestamp: new Date()
        };

        this.messages.push(message);
        this.renderMessages();
        this.saveChatHistory();
        this.scrollToBottom();
    }

    /**
     * Generate bot response based on user message
     * @param {string} userMessage - User's message
     * @returns {string} Bot response
     */
    generateBotResponse(userMessage) {
        const lowerMessage = userMessage.toLowerCase();
        
        // Study tips
        if (lowerMessage.includes('ููู ุงุฐุงูุฑ') || lowerMessage.includes('ูุฐุงูุฑุฉ') || lowerMessage.includes('ุฏุฑุงุณุฉ')) {
            return this.getStudyTips();
        }

        // Anatomy
        if (lowerMessage.includes('ุชุดุฑูุญ') || lowerMessage.includes('anatomy')) {
            return this.getAnatomyTips();
        }

        // Practical training
        if (lowerMessage.includes('ุชุฏุฑูุจ') || lowerMessage.includes('ุนููู') || lowerMessage.includes('practical')) {
            return this.getPracticalTips();
        }

        // Exams
        if (lowerMessage.includes('ุงูุชุญุงู') || lowerMessage.includes('ุงุฎุชุจุงุฑ') || lowerMessage.includes('exam')) {
            return this.getExamTips();
        }

        // Nursing skills
        if (lowerMessage.includes('ููุงุฑุฉ') || lowerMessage.includes('skill') || lowerMessage.includes('ุชูุฑูุถ')) {
            return this.getNursingSkills();
        }

        // Greeting
        if (lowerMessage.includes('ูุฑุญุจุง') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
            return 'ูุฑุญุจุงู! ููู ูููููู ูุณุงุนุฏุชู ูู ูุฌุงู ุงูุชูุฑูุถุ ๐';
        }

        // Default response
        return this.getDefaultResponse();
    }

    /**
     * Get study tips
     * @returns {string} Study tips response
     */
    getStudyTips() {
        const tips = [
            '๐ **ูุตุงุฆุญ ุงููุฐุงูุฑุฉ ุงููุนุงูุฉ:**\n\n',
            '1๏ธโฃ **ูุณูู ุงููุงุฏุฉ ูุฃุฌุฒุงุก ุตุบูุฑุฉ** - ูุง ุชุญุงูู ุญูุธ ูู ุดูุก ูุฑุฉ ูุงุญุฏุฉ\n',
            '2๏ธโฃ **ุงุณุชุฎุฏู ุงูุฎุฑุงุฆุท ุงูุฐูููุฉ** - ุชุณุงุนุฏ ูู ุฑุจุท ุงููุนูููุงุช\n',
            '3๏ธโฃ **ุงููุฑุงุฌุนุฉ ุงููุณุชูุฑุฉ** - ุฑุงุฌุน ูุง ุฏุฑุณุชู ูู ููู\n',
            '4๏ธโฃ **ุญู ุงูุงุฎุชุจุงุฑุงุช** - ุงุฎุชุจุฑ ููุณู ุจุงูุชุธุงู\n',
            '5๏ธโฃ **ุฎุฐ ูุชุฑุงุช ุฑุงุญุฉ** - ูุง ุชุฐุงูุฑ ูุฃูุซุฑ ูู 45 ุฏูููุฉ ูุชูุงุตูุฉ\n',
            '6๏ธโฃ **ุงุณุชุฎุฏู ุงูุฃููุงู ูุงูุฑุณูู** - ุชุฌุนู ุงููุนูููุงุช ุฃูุซุฑ ูุถูุญุงู\n\n',
            '๐ก **ูุตูุญุฉ:** ุงุจุฏุฃ ุจุงูููุงุฏ ุงูุตุนุจุฉ ุฃููุงู ุนูุฏูุง ูููู ุนููู ูู ุฃูุถู ุญุงูุงุชู!'
        ];
        return tips.join('');
    }

    /**
     * Get anatomy tips
     * @returns {string} Anatomy tips response
     */
    getAnatomyTips() {
        const tips = [
            '๐ซ **ูุตุงุฆุญ ูุฏุฑุงุณุฉ ุงูุชุดุฑูุญ:**\n\n',
            '1๏ธโฃ **ููู ุงูุนูุงูุงุช ุงูููุงููุฉ** - ุฑูุฒ ุนูู ูููุน ูู ุนุถู\n',
            '2๏ธโฃ **ุงุณุชุฎุฏู ุงูุฑุณูู ุงูุชูุถูุญูุฉ** - ุงูุตูุฑ ุฃูุถู ูู ุงููุตูุต\n',
            '3๏ธโฃ **ุงุฏุฑุณ ุจุงูุชุฑุชูุจ ุงูููุทูู** - ูู ุงููุจูุฑ ุฅูู ุงูุตุบูุฑ\n',
            '4๏ธโฃ **ุฑุจุท ุงูุชุดุฑูุญ ุจุงููุธููุฉ** - ููุงุฐุง ูุฐุง ุงูุดููุ\n',
            '5๏ธโฃ **ุงุณุชุฎุฏู ุงูููุงุฐุฌ ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ** - ุฅุฐุง ูุงูุช ูุชููุฑุฉ\n',
            '6๏ธโฃ **ุชุฏุฑุจ ุนูู ุงูุฑุณู** - ุฑุณู ุงูุฃุนุถุงุก ูุณุงุนุฏ ูู ุงูุญูุธ\n\n',
            '๐ฌ **ุฃุฏูุงุช ูููุฏุฉ:** ุชุทุจููุงุช ุงูุชุดุฑูุญ ุงูุชูุงุนููุฉุ ุงูููุฏูููุงุช ุงูุชุนููููุฉุ ุงูููุงุฐุฌ ุงูุจูุงุณุชูููุฉ'
        ];
        return tips.join('');
    }

    /**
     * Get practical training tips
     * @returns {string} Practical training tips response
     */
    getPracticalTips() {
        const tips = [
            '๐ฅ **ูุตุงุฆุญ ุงูุชุฏุฑูุจ ุงูุนููู:**\n\n',
            '1๏ธโฃ **ูู ูุณุชุนุฏุงู ููุณูุงู** - ุงูุชุฏุฑูุจ ุงูุนููู ูุฏ ูููู ูุฑููุงู\n',
            '2๏ธโฃ **ุงุทุฑุญ ุงูุฃุณุฆูุฉ** - ูุง ุชุฎุฌู ูู ุงูุณุคุงู ุนู ุฃู ุดูุก\n',
            '3๏ธโฃ **ุณุฌู ููุงุญุธุงุชู** - ุงูุชุจ ูู ูุง ุชุชุนููู\n',
            '4๏ธโฃ **ุชุนูู ูู ุงูุฃุฎุทุงุก** - ุงูุฃุฎุทุงุก ุฌุฒุก ูู ุงูุชุนูู\n',
            '5๏ธโฃ **ูู ูุญุชุฑูุงู** - ุงุญุชุฑู ุงููุฑุถู ูุงูุทุงูู ุงูุทุจู\n',
            '6๏ธโฃ **ุชุฏุฑุจ ุนูู ุงูููุงุฑุงุช ุงูุฃุณุงุณูุฉ** - ุงูุญููุ ููุงุณ ุงูุถุบุทุ ุฅูุฎ\n\n',
            '๐ช **ุชุฐูุฑ:** ุงูุชุฏุฑูุจ ุงูุนููู ูู ุฃูุถู ุทุฑููุฉ ูุชุนูู ุงูุชูุฑูุถ!'
        ];
        return tips.join('');
    }

    /**
     * Get exam preparation tips
     * @returns {string} Exam tips response
     */
    getExamTips() {
        const tips = [
            '๐ **ูุตุงุฆุญ ุงูุชุญุถูุฑ ููุงูุชุญุงูุงุช:**\n\n',
            '1๏ธโฃ **ุงุจุฏุฃ ูุจูุฑุงู** - ูุง ุชุคุฌู ุงูุฏุฑุงุณุฉ ููุขุฎุฑ\n',
            '2๏ธโฃ **ุฑุงุฌุน ุงูุงุฎุชุจุงุฑุงุช ุงูุณุงุจูุฉ** - ุชุนุฑู ุนูู ููุท ุงูุฃุณุฆูุฉ\n',
            '3๏ธโฃ **ูู ุฌูุฏุงู** - ุงูููู ููู ููุฐุงูุฑุฉ\n',
            '4๏ธโฃ **ุชูุงูู ูุฌุจุฉ ุตุญูุฉ** - ูุจู ุงูุงูุชุญุงู\n',
            '5๏ธโฃ **ุงูุฑุฃ ุงูุฃุณุฆูุฉ ุจุนูุงูุฉ** - ูุง ุชุชุณุฑุน ูู ุงูุฅุฌุงุจุฉ\n',
            '6๏ธโฃ **ุฑุงุฌุน ุฅุฌุงุจุงุชู** - ุฅุฐุง ูุงู ุงูููุช ูุณูุญ\n\n',
            '๐ฏ **ูุตูุญุฉ:** ุฑูุฒ ุนูู ููู ุงูููุงููู ุจุฏูุงู ูู ุงูุญูุธ ููุท!'
        ];
        return tips.join('');
    }

    /**
     * Get nursing skills tips
     * @returns {string} Nursing skills response
     */
    getNursingSkills() {
        const skills = [
            '๐ฉโโ๏ธ **ุงูููุงุฑุงุช ุงูุฃุณุงุณูุฉ ููุชูุฑูุถ:**\n\n',
            '๐น **ููุงุฑุงุช ุงูุชูุงุตู** - ุงูุชุญุฏุซ ูุน ุงููุฑุถู ูุงูุนุงุฆูุงุช\n',
            '๐น **ููุงุฑุงุช ุงููุฑุงูุจุฉ** - ูุฑุงูุจุฉ ุงูุนูุงูุงุช ุงูุญูููุฉ\n',
            '๐น **ููุงุฑุงุช ุงูุญูู** - ุงูุญูู ุงูุนุถูู ูุงููุฑูุฏู\n',
            '๐น **ููุงุฑุงุช ุงูุชุถููุฏ** - ุชุบููุฑ ุงูุถูุงุฏุงุช\n',
            '๐น **ููุงุฑุงุช ุงูููุงุณ** - ุถุบุท ุงูุฏูุ ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉุ ุงููุจุถ\n',
            '๐น **ููุงุฑุงุช ุงูุฅุณุนุงูุงุช ุงูุฃูููุฉ** - ุงูุชุนุงูู ูุน ุงูุญุงูุงุช ุงูุทุงุฑุฆุฉ\n',
            '๐น **ููุงุฑุงุช ุงูุชูุซูู** - ุชุณุฌูู ุงูููุงุญุธุงุช ุจุฏูุฉ\n\n',
            '๐ **ุชุฐูุฑ:** ุงูููุงุฑุณุฉ ุชุฌุนู ุงูููุงุฑุงุช ูุซุงููุฉ!'
        ];
        return skills.join('');
    }

    /**
     * Get default response
     * @returns {string} Default response
     */
    getDefaultResponse() {
        const responses = [
            'ุดูุฑุงู ูุณุคุงูู! ูููููู ูุณุงุนุฏุชู ูู:\n\n',
            '๐ **ูุตุงุฆุญ ุงููุฐุงูุฑุฉ ูุงูุฏุฑุงุณุฉ**\n',
            '๐ซ **ูุนูููุงุช ุนู ูุงุฏุฉ ุงูุชุดุฑูุญ**\n',
            '๐ฅ **ูุตุงุฆุญ ุงูุชุฏุฑูุจ ุงูุนููู**\n',
            '๐ **ุงูุชุญุถูุฑ ููุงูุชุญุงูุงุช**\n',
            '๐ฉโโ๏ธ **ููุงุฑุงุช ุงูุชูุฑูุถ ุงูุฃุณุงุณูุฉ**\n\n',
            'ูุง ุงูุฐู ุชุฑูุฏ ูุนุฑูุชู ุฃูุซุฑุ'
        ];
        return responses.join('');
    }

    /**
     * Render all messages
     */
    renderMessages() {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;

        chatMessages.innerHTML = '';

        this.messages.forEach(message => {
            const messageElement = this.createMessageElement(message);
            chatMessages.appendChild(messageElement);
        });
    }

    /**
     * Create a message element
     * @param {Object} message - Message object
     * @returns {HTMLElement} Message element
     */
    createMessageElement(message) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${message.type}`;
        messageDiv.setAttribute('data-message-id', message.id);

        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.innerHTML = this.formatMessageContent(message.content);

        const timeDiv = document.createElement('div');
        timeDiv.className = 'message-time';
        timeDiv.textContent = this.formatTime(message.timestamp);

        messageDiv.appendChild(contentDiv);
        messageDiv.appendChild(timeDiv);

        return messageDiv;
    }

    /**
     * Format message content (handle line breaks and formatting)
     * @param {string} content - Message content
     * @returns {string} Formatted content
     */
    formatMessageContent(content) {
        return content
            .replace(/\n/g, '<br>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>');
    }

    /**
     * Format timestamp
     * @param {Date} timestamp - Message timestamp
     * @returns {string} Formatted time
     */
    formatTime(timestamp) {
        const now = new Date();
        const messageTime = new Date(timestamp);
        const diffInMinutes = Math.floor((now - messageTime) / (1000 * 60));

        if (diffInMinutes < 1) {
            return 'ุงูุขู';
        } else if (diffInMinutes < 60) {
            return `ููุฐ ${diffInMinutes} ุฏูููุฉ`;
        } else if (diffInMinutes < 1440) {
            const hours = Math.floor(diffInMinutes / 60);
            return `ููุฐ ${hours} ุณุงุนุฉ`;
        } else {
            return messageTime.toLocaleDateString('ar-EG');
        }
    }

    /**
     * Show typing indicator
     */
    showTypingIndicator() {
        this.isTyping = true;
        const indicator = document.getElementById('typingIndicator');
        if (indicator) {
            indicator.style.display = 'flex';
        }
        this.scrollToBottom();
    }

    /**
     * Hide typing indicator
     */
    hideTypingIndicator() {
        this.isTyping = false;
        const indicator = document.getElementById('typingIndicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }

    /**
     * Scroll to bottom of chat
     */
    scrollToBottom() {
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            setTimeout(() => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 100);
        }
    }

    /**
     * Save chat history to localStorage
     */
    saveChatHistory() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.messages));
        } catch (error) {
            console.warn('Failed to save chat history:', error);
        }
    }

    /**
     * Load chat history from localStorage
     */
    loadChatHistory() {
        try {
            const saved = localStorage.getItem(this.storageKey);
            if (saved) {
                this.messages = JSON.parse(saved).map(msg => ({
                    ...msg,
                    timestamp: new Date(msg.timestamp)
                }));
            }
        } catch (error) {
            console.warn('Failed to load chat history:', error);
            this.messages = [];
        }
    }

    /**
     * Clear chat history
     */
    clearChat() {
        if (confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ูุณุญ ุงููุญุงุฏุซุฉุ')) {
            this.messages = [];
            this.renderMessages();
            this.addWelcomeMessage();
            localStorage.removeItem(this.storageKey);
        }
    }

    /**
     * Export chat history
     */
    exportChat() {
        const chatText = this.messages.map(msg => {
            const time = this.formatTime(msg.timestamp);
            const sender = msg.type === 'user' ? 'ุฃูุช' : 'ุงููุณุงุนุฏ';
            return `[${time}] ${sender}: ${msg.content}`;
        }).join('\n\n');

        const blob = new Blob([chatText], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `nursingiq-chat-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
}

// Global functions for HTML onclick handlers
function sendMessage() {
    if (window.chatbot) {
        window.chatbot.sendMessage();
    }
}

function handleMessageKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function sendQuickMessage(message) {
    if (window.chatbot) {
        const messageInput = document.getElementById('messageInput');
        if (messageInput) {
            messageInput.value = message;
            window.chatbot.sendMessage();
        }
    }
}

function clearChat() {
    if (window.chatbot) {
        window.chatbot.clearChat();
    }
}

function exportChat() {
    if (window.chatbot) {
        window.chatbot.exportChat();
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.chatbot = new NursingChatbot();
});
